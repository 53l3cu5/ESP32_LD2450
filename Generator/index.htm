<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configuration du Détecteur de Mouvement</title>
    <style>
        .indent {
            margin-left: 20px; /* Ajustez la valeur de la marge selon vos besoins */
        }
    </style>

</head>
<body>
    <header>
        <h1>Configuration du Détecteur de Mouvement</h1>
    </header>
    <main>
        <form id="config-form">
            <label for="zone-detection">Nombre de Zones de Détection :</label>
            <select id="zone-detection" name="zone-detection">
                <!-- Ajout des options de 1 à 10 -->
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10">10</option>
            </select>
            <br>
            <label for="cible-quitter-zone" class="indent">La cible doit quitter la zone :</label>
            <select id="cible-quitter-zone" name="cible-quitter-zone" class="indent">
                <!-- Options générées dynamiquement en JavaScript -->
            </select>
            <br>
            <br>
            <label for="zone-exclusion">Nombre de Zones d'Exclusion :</label>
            <select id="zone-exclusion" name="zone-exclusion">
                <option value="0">0</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <!-- Ajoutez autant d'options que nécessaire -->
            </select>
            <br>
            <textarea id="generated-text" rows="10" cols="50" readonly></textarea> <!-- Zone de texte pour afficher le texte généré -->
            <br>
            <input type="submit" value="Générer et Télécharger">
        </form>
        <a id="download-link" style="display: none" download="LD2450.yaml">Télécharger</a> <!-- Lien de téléchargement caché -->
    </main>
    <footer>
        <p>© 2024 Configuration du Détecteur de Mouvement</p>
    </footer>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const zoneDetectionSelect = document.getElementById('zone-detection');
            const cibleQuitterZoneSelect = document.getElementById('cible-quitter-zone');

            zoneDetectionSelect.addEventListener('change', function () {
                const selectedOptionValue = parseInt(zoneDetectionSelect.value);
                updateCibleQuitterZoneOptions(selectedOptionValue);
            });

            function updateCibleQuitterZoneOptions(numOptions) {
                // Effacer les options actuelles
                cibleQuitterZoneSelect.innerHTML = '';
                // Ajouter de nouvelles options
                for (let i = 0; i <= numOptions; i++) {
                    const option = document.createElement('option');
                    option.value = i.toString();
                    option.textContent = i.toString();
                    cibleQuitterZoneSelect.appendChild(option);
                }
            }

            // Initialiser les options de la liste déroulante dès le chargement de la page
            updateCibleQuitterZoneOptions(parseInt(zoneDetectionSelect.value));
        });
    </script>

    <script>
        document.getElementById('config-form').addEventListener('submit', function(event) {
            event.preventDefault();
            const zonesDetection = parseInt(document.getElementById('zone-detection').value);
            const cibleQuitterZones = parseInt(document.getElementById('cible-quitter-zone').value);
            const zonesExclusion = parseInt(document.getElementById('zone-exclusion').value);

            let entete = '';
            {
            entete = `#https://github.com/53l3cu5/ESP32_LD2450
#https://docs.screek.io/2a
substitutions:
  devicename: hpsz-room
  friendly_name: Room
  entity_name: "" # Leave empty if you want entities named "Target..." otherwise put "Room" to have an entity named "Room Target..."
  # specify below pin numbers of your LD2450
  tx_pin_ld2450: GPIO17
  rx_pin_ld2450: GPIO16
  
#ESP32/LD2450 : Human Presence Sensor by Zone
esphome:
  name: $devicename
  friendly_name: \${friendly_name}
  comment: Human Presence Sensor by Zone (ESP32/LD2450)
  #name_add_mac_suffix: True
  platformio_options:
    board_build.flash_mode: dio
    # board_build.f_cpu: 80000000L
  project: 
    name: 53l3cu5.Human_Presence_Sensor_by_Zone
    version: "2.1"
  on_boot:
    - priority: -200
      then:
        lambda: |-`;
            }
            for (let i = 1; i <= zonesDetection; i++) 
                entete += `
          id(zone${i}_target_exist).publish_state(false);`;
            for (let i = 1; i <= zonesExclusion; i++) 
                entete += `
          id(zone_ex${i}_target_exist).publish_state(false);`; 
            
            {
                entete += `
  includes:
    - zone.h
    
preferences:
    flash_write_interval: 5s
  

esp32:
  board: esp32dev

globals:
  - id: last_update_ld2450
    type: unsigned long
    restore_value: no
    initial_value: '0'
  - id: init_zone_publish
    type: bool
    restore_value: no
    initial_value: "false"

improv_serial:
  
logger:

debug:
  update_interval: 30s

api:
  encryption:
    # use your own encryption key plz.
    # https://esphome.io/components/api.html?#configuration-variables
    key: "Xd8KczJ8qKVYtAjyh3zVPar7zF8pkmZeOpnHSfjOqwA="
    
ota:
  # use your own ota password plz.
  password: !secret ota_password
  safe_mode: False

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: LIGHT
  reboot_timeout: 10min
  ap:
    ssid: "\${devicename} Hotspot"
    password: !secret hotspot_password

captive_portal:

web_server:
  port: 80
  
text_sensor:
  - platform: version
    name: "Version"
  - platform: debug
    reset_reason:
      name: \${entity_name} ESP Reset Reason
      icon: mdi:anchor
      disabled_by_default: True
  - platform: wifi_info
    ip_address:
      name: \${entity_name} ESP IP Address
      entity_category: "diagnostic"
      disabled_by_default: True
      icon: mdi:ip-network
    mac_address:
      name: \${entity_name} ESP MAC
      entity_category: "diagnostic"
      icon: mdi:ip-network
      disabled_by_default: True`;
          }
            // Générer le texte pour les zones de détection
            let zonesDetectionText = '';
            for (let i = 1; i <= zonesDetection; i++) {
                zonesDetectionText += `
  - platform: template
    name: \${entity_name} Zone${i} Info
    id: tips_zone${i}_conf
    icon: mdi:information-outline
    entity_category: config
    lambda: |-
      return {"Configure below" };
    update_interval: 1000s`;
            }

            // Générer le texte pour les zones d'exclusion
            let zonesExclusionText = '';
            for (let i = 1; i <= zonesExclusion; i++) {
                zonesExclusionText += `
  - platform: template
    name: \${entity_name} Zout${i} Info
    id: tips_zone_ex${i}_conf
    icon: mdi:information-outline
    entity_category: config
    lambda: |-
      return {"Zone Exclusion ${i}" };
    update_interval: 1000s`;
            }
            let text_sensor_target = '';
            {
            text_sensor_target = `  - platform: template
    name: \${entity_name} Any-Presence Info
    id: tips_any_presence_conf
    icon: mdi:information-outline
    entity_category: config
    lambda: |-
      return {"Any Presence Config" };
    update_interval: 1000s
  - platform: template
    name: \${entity_name} Target1 Direction
    id: target1_direction
    icon: mdi:directions
  - platform: template
    name: \${entity_name} Target2 Direction
    id: target2_direction
    icon: mdi:directions
  - platform: template
    name: \${entity_name} Target3 Direction
    id: target3_direction
    icon: mdi:directions
  - platform: template
    name: \${entity_name} Target1 Position
    id: target1_position
    icon: mdi:directions
  - platform: template
    name: \${entity_name} Target2 Position
    id: target2_position
    icon: mdi:directions
  - platform: template
    name: \${entity_name} Target3 Position
    id: target3_position
    icon: mdi:directions

number:
  - platform: template
    name: \${entity_name} Angle
    id: wall_angle
    min_value: 0
    max_value: 90
    mode: box
    device_class: duration
    entity_category: config
    unit_of_measurement: °
    icon: mdi:angle-acute
    step: 1
    optimistic: True
    initial_value: 0
    restore_value: True
  - platform: template
    name: \${entity_name} Any Presence Timeout
    id: any_presence_timeout
    min_value: 0
    max_value: 600
    mode: box
    device_class: duration
    entity_category: config
    unit_of_measurement: s
    icon: mdi:timer-off
    step: 1
    optimistic: True
    initial_value: 0
    restore_value: True`;}
            let number_zone_Timeout = '';
            for (let i = 1; i <= zonesDetection; i++) {
                number_zone_Timeout += `
  - platform: template
    name: \${entity_name} Zone${i} Timeout
    id: zone1_timeout
    min_value: 0
    max_value: 600
    mode: box
    device_class: duration
    entity_category: config
    unit_of_measurement: s
    icon: mdi:timer-off
    step: 1
    optimistic: True
    initial_value: 0
    restore_value: True`;
            }
            let number_zone = '';
            for (let i = 1; i <= zonesDetection; i++) {
                number_zone += `
    
  # Zone ${i}
  - platform: template
    name: \${entity_name} Zone${i} X
    id: zone${i}_x
    min_value: -4000
    max_value: 4000
    mode: box
    device_class: distance
    entity_category: config
    unit_of_measurement: mm
    icon: mdi:arrow-left-bold
    step: 10
    optimistic: True
    initial_value: 0
    restore_value: True
    on_value: 
      then:
        - script.execute: check_zone${i}_valide
  - platform: template
    name: \${entity_name} Zone${i} Y
    id: zone${i}_y
    mode: box
    min_value: -500
    max_value: 8000
    device_class: distance
    entity_category: config
    icon: mdi:arrow-up-bold
    unit_of_measurement: mm
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - script.execute: check_zone${i}_valide
  - platform: template
    name: \${entity_name} Zone${i} Height
    id: zone${i}_height
    icon: mdi:arrow-down-bold
    mode: box
    min_value: 0
    max_value: 8000
    initial_value: 0
    entity_category: config
    device_class: distance
    unit_of_measurement: mm
    step: 10
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - script.execute: check_zone${i}_valide
  - platform: template
    name: \${entity_name} Zone${i}Width
    id: zone${i}_width
    mode: box
    min_value: 0
    max_value: 8000
    device_class: distance
    unit_of_measurement: mm
    entity_category: config
    icon: mdi:arrow-right-bold
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - script.execute: check_zone${i}_valide`;
            }
            
            let number_zone_ex = '';
            for (let i = 1; i <= zonesExclusion; i++) {
                number_zone_ex += `
    
  # Zout${i}
  - platform: template
    name: \${entity_name} Zout${i} X
    id: zone_ex${i}_x
    min_value: -4000
    max_value: 4000
    mode: box
    device_class: distance
    entity_category: config
    unit_of_measurement: mm
    icon: mdi:arrow-left-bold
    step: 10
    optimistic: True
    initial_value: 0
    restore_value: True
    on_value: 
      then:
        - script.execute: check_zout${i}_valide
  - platform: template
    name: \${entity_name} Zout${i} Y
    id: zone_ex${i}_y
    mode: box
    min_value: -500
    max_value: 8000
    device_class: distance
    entity_category: config
    icon: mdi:arrow-up-bold
    unit_of_measurement: mm
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - script.execute: check_zout${i}_valide
  - platform: template
    name: \${entity_name} Zout${i} Height
    id: zone_ex${i}_height
    icon: mdi:arrow-down-bold
    mode: box
    min_value: 0
    max_value: 8000
    initial_value: 0
    entity_category: config
    device_class: distance
    unit_of_measurement: mm
    step: 10
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - script.execute: check_zout${i}_valide
  - platform: template
    name: \${entity_name} Zout${i} Width
    id: zone_ex${i}_width
    mode: box
    min_value: 0
    max_value: 8000
    device_class: distance
    unit_of_measurement: mm
    entity_category: config
    icon: mdi:arrow-right-bold
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - script.execute: check_zout${i}_valide`;
            }

            let binary_sensor = `

binary_sensor:
  - platform: status
    name: \${entity_name} Online
    id: ink_ha_connected
  - platform: template
    name: \${entity_name} Any Presence
    id: any_target_exist
    device_class: occupancy
    filters:
      - delayed_off: !lambda |-
          if (!id(init_zone_publish) || !id(zone_fn_enable).state) {
            return 0;
          };
          return id(any_presence_timeout).state * 1000.0;`;
            
            let binary_sensor_zone = '';
            for (let i = 1; i <= zonesDetection; i++) {
                binary_sensor_zone += `
  - platform: template
    name: \${entity_name} Zone${i} Presence
    id: zone${i}_target_exist
    device_class: occupancy
    filters:
      - delayed_off: !lambda |-
          if (!id(init_zone_publish) || !id(zone_fn_enable).state) {
            return 0;
          }
          return id(zone${i}_timeout).state * 1000.0;`;
            }
            let binary_sensor_zone_ex = '';
            for (let i = 1; i <= zonesExclusion; i++) {
                binary_sensor_zone_ex += `
  - platform: template
    name: \${entity_name} Zout${i} Presence
    id: zone_ex${i}_target_exist
    icon: mdi:account-multiple-remove
    device_class: occupancy`;
            }
            
            let check_zone = `

script:`;
            for (let i = 1; i <= zonesDetection; i++) {
                check_zone += `
  - id: check_zone${i}_valide
    then:
      - lambda: |-
          if (id(zone${i}_x).state == 0 && id(zone${i}_width).state == 0 && id(zone${i}_y).state == 0 && id(zone${i}_height).state == 0){
            id(tips_zone${i}_conf).publish_state("Configure below");
            return;
          }

          int x_size = id(zone${i}_width).state;
          int y_size = id(zone${i}_height).state;

          char combined[80]; 
          sprintf(combined, "Curr Size: %d x %d", x_size, y_size);
          id(tips_zone${i}_conf).publish_state(combined);`;
            }
            let check_zone_ex = `

script:`;
            for (let i = 1; i <= zonesExclusion; i++) {
                check_zone_ex += `
  - id: check_zout${i}_valide
    then:
      - lambda: |-
          id(tips_zone_ex${i}_conf).publish_state("Zone Exclusion ${i}");`;
            
            // Fusionner les textes générés
            const finalText1 = entete + zonesDetectionText + zonesExclusionText + text_sensor_target + number_zone_Timeout + number_zone + number_zone_ex;
            const finalText2 = binary_sensor + binary_sensor_zone + binary_sensor_zone_ex + check_zone + check_zone_ex;
            const finalText = finalText1 + finalText2;

            // Afficher le texte généré dans la zone de texte
            const generatedTextArea = document.getElementById('generated-text');
            generatedTextArea.textContent = finalText;

            // Afficher le lien de téléchargement
            const downloadLink = document.getElementById('download-link');
            downloadLink.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(finalText);
            downloadLink.style.display = 'block'; // Afficher le lien

            // Mettre à jour le nom de fichier téléchargé
            downloadLink.setAttribute('download', `LD2450.yaml`);
        });
    </script>
</body>
</html>
